// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VetClinic.Data;

#nullable disable

namespace VetClinic.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250524233457_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("VetClinic.Models.Lek", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Ilosc")
                        .HasColumnType("integer");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("leki");
                });

            modelBuilder.Entity("VetClinic.Models.Osoba", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Data_ur")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("osoby");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("VetClinic.Models.Wizyta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Data")
                        .HasColumnType("date");

                    b.Property<int>("LekarzId")
                        .HasColumnType("integer");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ZwierzeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LekarzId");

                    b.HasIndex("ZwierzeId");

                    b.ToTable("wizyty");
                });

            modelBuilder.Entity("VetClinic.Models.Zamowienie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Ilosc")
                        .HasColumnType("integer");

                    b.Property<int>("LekId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LekId");

                    b.ToTable("zamowienia");
                });

            modelBuilder.Entity("VetClinic.Models.Zwierze", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Gatunek")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Typ")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Wiek")
                        .HasColumnType("integer");

                    b.Property<int>("WlascicielId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WlascicielId");

                    b.ToTable("zwierzeta");
                });

            modelBuilder.Entity("WizytaLek", b =>
                {
                    b.Property<int>("LekId")
                        .HasColumnType("integer");

                    b.Property<int>("WizytaId")
                        .HasColumnType("integer");

                    b.HasKey("LekId", "WizytaId");

                    b.HasIndex("WizytaId");

                    b.ToTable("WizytaLek", (string)null);
                });

            modelBuilder.Entity("VetClinic.Models.Lekarz", b =>
                {
                    b.HasBaseType("VetClinic.Models.Osoba");

                    b.Property<string>("Specjalizacja")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Tryb")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.ToTable("lekarze");
                });

            modelBuilder.Entity("VetClinic.Models.Wizyta", b =>
                {
                    b.HasOne("VetClinic.Models.Lekarz", "Lekarz")
                        .WithMany()
                        .HasForeignKey("LekarzId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetClinic.Models.Zwierze", "Zwierze")
                        .WithMany()
                        .HasForeignKey("ZwierzeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Lekarz");

                    b.Navigation("Zwierze");
                });

            modelBuilder.Entity("VetClinic.Models.Zamowienie", b =>
                {
                    b.HasOne("VetClinic.Models.Lek", "Lek")
                        .WithMany()
                        .HasForeignKey("LekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lek");
                });

            modelBuilder.Entity("VetClinic.Models.Zwierze", b =>
                {
                    b.HasOne("VetClinic.Models.Osoba", "Wlasciciel")
                        .WithMany()
                        .HasForeignKey("WlascicielId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wlasciciel");
                });

            modelBuilder.Entity("WizytaLek", b =>
                {
                    b.HasOne("VetClinic.Models.Lek", null)
                        .WithMany()
                        .HasForeignKey("LekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetClinic.Models.Wizyta", null)
                        .WithMany()
                        .HasForeignKey("WizytaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VetClinic.Models.Lekarz", b =>
                {
                    b.HasOne("VetClinic.Models.Osoba", null)
                        .WithOne()
                        .HasForeignKey("VetClinic.Models.Lekarz", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
